from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import requests
from keyboards.inline_keyboards import emails_start_inline_keyboard, emails_end_inline_keyboard, emails_accept_settings_keyboard, cancel_existing_mailing_keyboard_restart, setup_inline_keyboard
from settings.config import API_URL, HEADER
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import re

mailing_router = Router()


class MailingStates(StatesGroup):
    start_date = State()
    end_date = State()
    intermediate_dates = State()
    confirmation = State()
    cancel_existing = State()


class TestStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_full_name = State()
    waiting_for_confirmation = State()


WEEKDAYS_RU = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

@mailing_router.callback_query(F.data.in_(['setup_option_1']))
async def setup_emails(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∞."""
    await callback.message.delete()
    await state.clear()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞:', reply_markup=emails_start_inline_keyboard())
    await state.set_state(MailingStates.start_date)

@mailing_router.callback_query(MailingStates.start_date)
async def start_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞."""
    await callback.message.delete()
    start_date = callback.data.replace('start_', '')
    await state.update_data(start_date=datetime.strptime(start_date, '%d.%m.%Y'))
    await callback.message.answer(f'\U0001F4A1–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:',
                                  reply_markup=emails_end_inline_keyboard(start_date))
    await state.set_state(MailingStates.end_date)
    await callback.answer()

@mailing_router.callback_query(MailingStates.end_date)
async def end_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞."""
    end_date = callback.data.replace('end_', '')
    await state.update_data(end_date=datetime.strptime(end_date, '%d.%m.%Y'))
    await state.set_state(MailingStates.intermediate_dates)

    await intermediate_dates(callback, state)

@mailing_router.callback_query(MailingStates.intermediate_dates)
async def intermediate_dates(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    await callback.message.delete()
    data = await state.get_data()
    intermediate_dates = calculate_intermediate_dates(data['start_date'], data['end_date'])
    await state.update_data(intermediate_dates=intermediate_dates)
    dates_text = '\n\n'.join(intermediate_dates)
    total_days = (data['end_date'] - data['start_date']).days + 1
    start_date_formatted = data['start_date'].date().strftime('%d.%m.%Y')
    end_date_formatted = data['end_date'].date().strftime('%d.%m.%Y')
    text = (
        f"üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏* üì¢\n\n"
        f"üìÖ *–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞:* {start_date_formatted}\n"
        f"‚è≥ *–ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞:* {end_date_formatted}\n\n"
        f"üìÜ *–í—Å–µ–≥–æ –¥–Ω–µ–π –æ–ø—Ä–æ—Å–∞:* {total_days}\n\n"
        f"üîÅ *–î–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–æ–∫:*\n{dates_text}\n\n"
        f"üïí *–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:* 12:00\n\n"
        f"‚úÖ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?*"
    )

    await callback.message.answer(text, reply_markup=emails_accept_settings_keyboard(), parse_mode='Markdown')
    await state.set_state(MailingStates.confirmation)
    await callback.answer()

@mailing_router.callback_query(MailingStates.confirmation)
async def confirm_mailing(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        await callback.message.delete()
        if callback.data == 'confirm_mailing':
            loading_msg = await callback.message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            data = await state.get_data()
            try:
                intermediate_dates = [
                    datetime.strptime(d.split(" ")[0], "%d.%m.%Y").date()
                    for d in data.get("intermediate_dates", [])
                    if d.strip()
                ]
            except ValueError as e:
                await loading_msg.edit_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞—Ç: {str(e)}")
                await state.clear()
                return

            payload = {
                "chat_id": callback.from_user.id,
                "start_date": data["start_date"].strftime("%Y-%m-%d"),
                "end_date": data["end_date"].strftime("%Y-%m-%d"),
                "intermediate_dates": [d.strftime("%Y-%m-%d") for d in intermediate_dates],
            }

            try:
                response = requests.post(f'{API_URL}/mailing/settings/', json=payload, headers=HEADER, verify=False)
                response.raise_for_status()
                await loading_msg.edit_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!")
                await state.clear()

            except requests.exceptions.HTTPError as e:
                if response.status_code == 400:
                    try:
                        error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        if "–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è" in error_msg.lower():
                            date_matches = re.findall(r"\d{4}-\d{2}-\d{2}", error_msg)
                            if len(date_matches) >= 4:
                                def reformat_date(date_str):
                                    year, month, day = date_str.split('-')
                                    return f"{day}.{month}.{year}"

                                reformatted_dates = [reformat_date(date) for date in date_matches]

                                new_dates = f"{reformatted_dates[0]} - {reformatted_dates[1]}"
                                existing_dates = f"{reformatted_dates[2]} - {reformatted_dates[3]}"
                                message = (
                                    "‚ö†Ô∏è *–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞—Ç*\n"
                                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                                    "üóì *–í–∞—à–∏ –¥–∞—Ç—ã:*\n"
                                    f"`{new_dates}`\n\n"
                                    "üìÖ *–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:*\n" 
                                    f"`{existing_dates}`\n"
                                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                                    "–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?"
                                )
                            else:
                                message = (
                                    f"‚ùå {error_msg}\n\n"
                                    "–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?"
                                )
                            await loading_msg.edit_text(
                                message,
                                reply_markup=cancel_existing_mailing_keyboard_restart(),
                                parse_mode='Markdown'
                            )
                            await state.set_state(MailingStates.cancel_existing)
                        else:
                            await loading_msg.edit_text(
                                f"‚ùå –û—à–∏–±–∫–∞: {error_msg}",
                                parse_mode="Markdown"
                            )
                    except ValueError:
                        await loading_msg.edit_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                        )
                else:
                    await loading_msg.edit_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
                    await state.clear()

            except requests.exceptions.RequestException as e:
                await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
                await state.clear()

        elif callback.data == 'cancel_mailing':
            await state.clear()
            await callback.message.answer(
                "üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞:",
                reply_markup=emails_start_inline_keyboard(),
            )
            await state.set_state(MailingStates.start_date)

        await callback.answer()

    except Exception as e:
        await loading_msg.edit_text(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
        await callback.answer()


@mailing_router.callback_query(MailingStates.cancel_existing)
async def cancel_existing_mailing(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await callback.message.delete()
    try:
        loading_msg = await callback.message.answer("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        if callback.data == 'cancel_existing_mailing_restart':
            list_response = requests.get(
                f"{API_URL}/mailing/all/",
                headers=HEADER,
                verify=False
            )
            list_response.raise_for_status()

            mailings = list_response.json().get('data', [])
            if not mailings:
                await loading_msg.edit_text(
                    "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    parse_mode="Markdown"
                )
                return

            latest_mailing = mailings[0]
            mailing_id = latest_mailing['id']

            delete_response = requests.delete(
                f"{API_URL}/mailing/{mailing_id}/",
                headers=HEADER,
                verify=False
            )
            delete_response.raise_for_status()

            await loading_msg.edit_text(
                "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã:",
                reply_markup=emails_start_inline_keyboard(),
                parse_mode="Markdown"
            )
            await state.set_state(MailingStates.start_date)

        await callback.answer()

    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        try:
            error_msg = e.response.json().get('error', str(e))
        except:
            error_msg = str(e)
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {error_msg}",
            parse_mode="Markdown"
        )
    except requests.exceptions.RequestException as e:
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}",
            parse_mode="Markdown"
        )
    except Exception as e:
        await loading_msg.edit_text(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode="Markdown"
        )
    finally:
        await callback.answer()


def calculate_intermediate_dates(start_date: datetime, end_date: datetime) -> list[str]:
    dates = [f"{start_date.strftime('%d.%m.%Y')} ({WEEKDAYS_RU[start_date.weekday()]})"]
    mid_date = get_next_weekday(start_date + (end_date - start_date) / 2)
    dates.append(f"{mid_date.strftime('%d.%m.%Y')} ({WEEKDAYS_RU[mid_date.weekday()]})")

    last_date = get_next_weekday(end_date - timedelta(days=1))
    dates.append(f"{last_date.strftime('%d.%m.%Y')} ({WEEKDAYS_RU[last_date.weekday()]})")
    return dates


def get_next_weekday(date: datetime) -> datetime:
    if date.weekday() == 5: return date - timedelta(days=1)
    if date.weekday() == 6: return date - timedelta(days=2)
    return date


@mailing_router.callback_query(F.data == "settings_test")
async def start_test_dialog(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."""
    await callback.message.delete()
    await state.clear()
    await callback.message.answer("üìß –£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ \n" \
                                  "üìå –ù–∞–ø—Ä–∏–º–µ—Ä: user@croc.ru", parse_mode="Markdown")
    await state.set_state(TestStates.waiting_for_email)


@mailing_router.message(TestStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã."""
    email = message.text.strip()
    if '@' not in email or '.' not in email:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email\n" \
                             "üìå –ù–∞–ø—Ä–∏–º–µ—Ä: user@croc.ru", parse_mode="Markdown")
        return
    await state.update_data(email=email)
    await message.answer("üë§ –£–∫–∞–∂–∏—Ç–µ –§–ò –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ \n" \
                         "üìå –ù–∞–ø—Ä–∏–º–µ—Ä: –í–∞—Å–∏–ª–µ–Ω–∫–æ –°—Ç–∞–Ω–∏—Å–ª–∞–≤", parse_mode="Markdown")
    await state.set_state(TestStates.waiting_for_full_name)

@mailing_router.message(TestStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    full_name = message.text.strip()
    name_parts = full_name.split(' ', 1)
    if len(name_parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –§–ò –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è' \n" \
                             "üìå –ù–∞–ø—Ä–∏–º–µ—Ä –í–∞—Å–∏–ª–µ–Ω–∫–æ –°—Ç–∞–Ω–∏—Å–ª–∞–≤.", parse_mode="Markdown")
        return
    await state.update_data(full_name=full_name, first_name=name_parts[1], last_name=name_parts[0])

    data = await state.get_data()
    email = data.get("email")
    first_name = data.get("first_name")
    last_name = data.get("last_name")

    test_api_url = f"{API_URL}/test-create/"
    test_data = {
        "email": email,
        "first_name": first_name,
        "last_name": last_name
    }
    await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...", parse_mode="Markdown")
    try:
        response = requests.post(test_api_url, json=test_data, headers=HEADER, verify=False)
        response.raise_for_status()
        if response.status_code == 201:
            await message.answer(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {full_name}.\n\n"
                f"üì¨ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}.",
            )
        await state.clear()
    except requests.exceptions.HTTPError as e:
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        except:
            error_msg = str(e)
        if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_msg:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                "üì¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏—Å—å–º–æ.",
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_msg}", parse_mode="Markdown")
        await state.clear()
    except requests.exceptions.RequestException as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}", parse_mode="Markdown")
        await state.clear()
