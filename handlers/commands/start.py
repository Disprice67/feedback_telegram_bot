from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram import Bot
import requests
from database.db import BotDatabase
from settings.config import API_URL, HEADER


start_router = Router()
db = BotDatabase()


async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="setup", description="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞"),
        BotCommand(command='upload', description='üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å/–í—ã–≥—Ä—É–∑–∏—Ç—å'),
        BotCommand(command='information', description='‚ùó–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    ]
    await bot.set_my_commands(commands)


@start_router.message(Command('start'))
async def start_with_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å —Ç–æ–∫–µ–Ω–æ–º."""
    await state.clear()
    chat_id = message.chat.id
    args = message.text.split(maxsplit=1)
    token = args[1] if len(args) > 1 else None

    if token:
        response = requests.post(
            f"{API_URL}/telegram/verify-token/",
            headers=HEADER,
            data={"token": token, "chat_id": chat_id},
            verify=False
        )

        data = response.json()
        if data.get("status") == "success":
            email = data.get("email")
            if not email:
                await message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—á—Ç—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!")
            db.add_user(chat_id, email, is_allowed=True)
            await message.answer("‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
            await show_menu(message)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π')}")
    else:
        if not db.is_user_allowed(chat_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        else:
            await show_menu(message)


async def show_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await message.answer(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* \n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É. –í –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚öôÔ∏è */setup* ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞.\n"
        "üìÇ */upload* ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.\n"
        "‚ÑπÔ∏è */information* ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.",
        parse_mode="Markdown"
    )
