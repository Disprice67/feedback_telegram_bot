from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.inline_keyboards import upload_inline_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils import read_excel, validate_columns, get_file_stream, get_category_config
import requests
from settings.config import HEADERS
from io import BytesIO
from aiogram.types import BufferedInputFile
from datetime import datetime


upload_router = Router()

@upload_router.message(Command('upload'))
async def upload(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /upload"""
    await state.clear()

    await message.answer(
        "üìÇ *–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üß≠ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:*\n"
        "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ *–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤* ‚Äî –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ.\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ *–∫–µ–π—Å—ã*.\n"
        "3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* ‚Äî –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —Å –∫–µ–π—Å–∞–º–∏ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏.\n"
        "üì• *–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:* XLSX.\n\n"
        "‚ùó‚ùó–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏‚ùó‚ùó\n\n"
        "üîé *–í–∞–∂–Ω–æ:* —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π. "
        "–ï—Å–ª–∏ —Ñ–∞–π–ª –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.\n\n"
        "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=upload_inline_keyboard()
    )


class UploadStates(StatesGroup):
    category = State()
    waiting_for_file = State()


categorys = {
    "upload_cases": "–ö–µ–π—Å—ã",
    "upload_engineers": "–ò–Ω–∂–µ–Ω–µ—Ä—ã",
    "upload_managers": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
}

@upload_router.callback_query(F.data.in_(["upload_cases", "upload_engineers", "upload_managers", 'download_xlsx']))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª."""
    await state.update_data(category=callback.data)
    if callback.data == 'download_xlsx':
        dowload_config = get_category_config(callback.data)
        await callback.message.answer("‚ö†Ô∏è –°–∫–∞—á–∏–≤–∞—é...")
        await handle_download_xlsx(callback, dowload_config["url"])
        return
    else:
        await callback.message.answer(
            f"üìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{categorys[callback.data]}*.\n\n"
            "üîÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.",
            parse_mode="Markdown",
        )
        await state.set_state(UploadStates.waiting_for_file)


async def handle_download_xlsx(callback: CallbackQuery, url: str):
    try:
        response = requests.get(url, headers=HEADERS, verify=False)
        response.raise_for_status()

        file_bytes = BytesIO(response.content)
        file_bytes.name = f"export_{datetime.now().strftime('%Y-%m-%d')}.xlsx"

        xlsx_file = BufferedInputFile(file_bytes.read(), filename="export.xlsx")

        await callback.message.answer_document(xlsx_file, caption="‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞")
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.\n–û—à–∏–±–∫–∞: {str(e)}")


@upload_router.message(F.document, UploadStates.waiting_for_file)
async def handle_file_upload(message: Message, state: FSMContext):
    file_name = message.document.file_name
    if not file_name.lower().endswith('.xlsx'):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º *XLSX*.", parse_mode="Markdown")
        return

    state_data = await state.get_data()
    category = state_data.get('category')
    config = get_category_config(category)

    if not config:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    file_stream = await get_file_stream(message)

    df = read_excel(file_stream)
    if df is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞.")
        return

    if not validate_columns(df, config['columns']):
        await message.answer(build_error_message(config['columns']), parse_mode="HTML")
        return

    await message.answer("‚ö†Ô∏è –ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üëÄ")
    response = await upload_xlsx_to_api(file_stream, config['url'])

    await handle_upload_response(message, response)
    await state.clear()


async def upload_xlsx_to_api(file_stream: BytesIO, url: str) -> requests.Response:
    file_stream.seek(0)
    return requests.post(
        url,
        headers=HEADERS,
        files={'file': ('uploaded_file.xlsx', file_stream, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')},
        verify=False
    )


async def handle_upload_response(message, response):
    try:
        data = response.json()
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")
        return

    if response.status_code == 201:
        msg = f"‚úÖ {data.get('message', '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')}\n"

        new_users = data.get("new_users")
        if new_users:
            msg += "\nüë• *–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in new_users:
                name = str(user.get("first_name", "")).strip().title()
                email = user.get("email", "‚Äî")
                msg += f"- {name} ‚Äì {email}\n"

        await message.answer(msg, parse_mode="Markdown")

    elif response.status_code == 400:
        errors = data if isinstance(data, dict) else {"error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."}
        msg = "‚ùå *–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:*\n"
        for field, messages in errors.items():
            if isinstance(messages, list):
                for m in messages:
                    msg += f"- *{field}*: {m}\n"
            else:
                msg += f"- *{field}*: {messages}\n"
        await message.answer(msg, parse_mode="Markdown")

    else:
        error = data.get("error", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})")
        await message.answer(f"‚ùå {error}", parse_mode="Markdown")


def build_error_message(columns: list[str]) -> str:
    return (
        "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n\n"
        + ", ".join(columns)
    )
