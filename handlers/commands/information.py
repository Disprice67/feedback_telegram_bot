from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.inline_keyboards import information_inline_keyboard
from aiogram.fsm.context import FSMContext
import requests
from settings.config import URL_WEB_SITE, HEADERS
import tempfile
from aiogram.types import FSInputFile


information_router = Router()

@information_router.message(Command('information'))
async def information(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /information"""
    await state.clear()
    await message.answer(
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø—Ä–æ—Å–Ω–∏–∫—É* \n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ–ø—Ä–æ—Å–Ω–∏–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        parse_mode="Markdown",
        reply_markup=information_inline_keyboard()
    )


@information_router.callback_query(F.data.in_(['info_option_1']))
async def list_engineers(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö'"""
    try:
        response = requests.get(f'{URL_WEB_SITE}api/v1/engineers/stats/', headers=HEADERS, verify=False)
        response_data = response.json()

        engineers = response_data.get("engineers", [])
        total_feedbacks = response_data.get("total_feedbacks", {})

        message_text = "üìã *–°–ø–∏—Å–æ–∫ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤:*\n\n"
        message_text += "üë∑‚Äç‚ôÇÔ∏è **–ò–º—è –§–∞–º–∏–ª–∏—è** ‚Äî **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**\n\n"


        if not engineers:
            message_text += "–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ —Å –æ—Ç–∑—ã–≤–∞–º–∏.\n"
        else:
            for engineer in engineers:
                message_text += (
                    f"üë∑‚Äç‚ôÇÔ∏è {engineer['engineer']} ‚Äî "
                    f"{engineer['feedback_stats']}\n"
                )

        message_text += "\nüìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_feedbacks.get('total_sent', 0)}\n"
        message_text += f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_feedbacks.get('total_unsent', 0)}\n"

        await callback.message.answer(message_text, parse_mode="Markdown")

    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@information_router.callback_query(F.data.in_(['info_option_2']))
async def list_project_questions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'"""
    labels = {
        'first_question': '‚ùì –¢—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –ª–∏ —Ç–µ–±–µ –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤?',
        'second_question': '‚ùì –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ—à–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤?',
        'third_question': '‚ùì –ë—ã–ª–æ –ª–∏ —ç—Ç–æ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª–µ–∑–Ω—ã–º?',
        'fourth_question': '‚ùì –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?',
        'fourth_comment_question': 'üí¨ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É:',
        'rating': '‚≠ê –û—Ü–µ–Ω–∏ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç -1 –¥–æ 2, –≥–¥–µ:',
        'comment': 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ–ª–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è):',
    }

    message_text = "üìã *–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤:*\n\n"
    for key, question in labels.items():
        message_text += f"{question}  \n"

    await callback.message.answer(message_text, parse_mode="Markdown")


@information_router.callback_query(F.data == "info_option_4")
async def show_email_template(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–∏—Å—å–º–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞."""
    try:
        response = requests.get(
            f"{URL_WEB_SITE}api/v1/email-template/preview/",
            headers=HEADERS,
            verify=False
        )
        response.raise_for_status()
        rendered_template = response.json().get("template", "")

        if not rendered_template:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞.")
            return

        with tempfile.NamedTemporaryFile("w+", suffix=".html", delete=False, encoding="utf-8") as tmp:
            tmp.write(rendered_template)
            tmp_path = tmp.name

        document = FSInputFile(tmp_path, filename="email_template.html")
        await callback.message.answer_document(
            document,
            caption="üì® –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )

    except Exception as e:
        await callback.message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞.")
