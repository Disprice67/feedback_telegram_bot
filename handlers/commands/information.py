from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.inline_keyboards import information_inline_keyboard, cancel_existing_mailing_keyboard
from aiogram.fsm.context import FSMContext
import requests
from settings.config import API_URL, HEADER
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime


information_router = Router()

@information_router.message(Command('information'))
async def information(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /information"""
    await state.clear()
    await message.answer(
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø—Ä–æ—Å–Ω–∏–∫—É* \n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ–ø—Ä–æ—Å–Ω–∏–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        parse_mode="Markdown",
        reply_markup=information_inline_keyboard()
    )


@information_router.callback_query(F.data.in_(['info_option_1']))
async def list_engineers(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö'"""
    try:
        await callback.message.delete()
        loading_msg = await callback.message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        response = requests.get(f'{API_URL}/stats/all', headers=HEADER, verify=False)
        response_data = response.json()

        engineers = response_data.get("engineers", [])
        total_feedbacks = response_data.get("total_feedbacks", {})

        message_text = "üìã *–°–ø–∏—Å–æ–∫ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤:*\n\n"
        message_text += "üë∑‚Äç‚ôÇÔ∏è **–ò–º—è –§–∞–º–∏–ª–∏—è** ‚Äî **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**\n\n"


        if not engineers:
            message_text += "–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏.\n"
        else:
            for engineer in engineers:
                message_text += (
                    f"üë∑‚Äç‚ôÇÔ∏è {engineer['engineer']} ‚Äî "
                    f"{engineer['feedback_stats']}\n"
                )

        message_text += "\nüìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_feedbacks.get('total_sent', 0)}\n"
        message_text += f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_feedbacks.get('total_unsent', 0)}\n"

        await loading_msg.edit_text(message_text, parse_mode="Markdown")

    except Exception as e:
        await loading_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@information_router.callback_query(F.data.in_(['info_option_2']))
async def list_project_questions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'"""
    await callback.message.delete()
    labels = {
        'first_question': '‚ùì –¢—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –ª–∏ —Ç–µ–±–µ –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤?',
        'second_question': '‚ùì –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ—à–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤?',
        'third_question': '‚ùì –ë—ã–ª–æ –ª–∏ —ç—Ç–æ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª–µ–∑–Ω—ã–º?',
        'fourth_question': '‚ùì –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?',
        'fourth_comment_question': 'üí¨ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É:',
        'rating': '‚≠ê –û—Ü–µ–Ω–∏ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç -1 –¥–æ 2, –≥–¥–µ:',
        'comment': 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ–ª–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è):',
    }

    message_text = "üìã *–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤:*\n\n"
    for key, question in labels.items():
        message_text += f"{question}  \n"

    await callback.message.answer(message_text, parse_mode="Markdown")


def create_mailing_list_keyboard(mailings):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for mailing in mailings:
        button_text = f"{mailing['period_name']}"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"mailing_info_{mailing['id']}"
            )
        ])
    return keyboard


def create_mailing_action_keyboard(mailing_id, status):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    if status != 'completed':
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                callback_data=f"cancel_mailing_{mailing_id}"
            )
        ])
    return keyboard


@information_router.callback_query(F.data == "info_option_3")
async def show_mailing_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await callback.message.delete()
    try:
        loading_msg = await callback.message.answer("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫...")

        response = requests.get(
            f"{API_URL}/mailing/all/",
            headers=HEADER,
            verify=False,
        )
        response.raise_for_status()

        data = response.json()
        if not data or 'data' not in data:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

        if not data['data']:
            await loading_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        else:
            await loading_msg.edit_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å–Ω–∏–∫:",
                reply_markup=create_mailing_list_keyboard(data['data'])
            )

    except requests.exceptions.RequestException as e:
        error_detail = str(e)
        if isinstance(e, requests.exceptions.Timeout):
            error_detail = "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)"
        elif isinstance(e, requests.exceptions.HTTPError):
            error_detail = f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}"

        await loading_msg.edit_text(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_detail}")

    except ValueError as e:
        await loading_msg.edit_text(f"üö´ –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    except Exception as e:
        await loading_msg.edit_text(f"üö´ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


@information_router.callback_query(F.data.startswith("mailing_info_"))
async def show_mailing_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ."""
    await callback.message.delete()
    try:
        mailing_id = callback.data.split("_")[-1]
        loading_msg = await callback.message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        response = requests.get(
            f"{API_URL}/mailing/{mailing_id}/",
            headers=HEADER,
            verify=False
        )
        response.raise_for_status()
        mailing_data = response.json()

        stats_mailing = mailing_data.get('statistics', '')
        feedback_stats = None
        if not stats_mailing:
            stats_response = requests.get(
                f"{API_URL}/stats/count/{mailing_id}/",
                headers=HEADER,
                verify=False
            )
            feedback_stats = stats_response.json()

        tasklog_response = requests.get(
            f"{API_URL}/mailing/tasklog/{mailing_id}/",
            headers=HEADER,
            verify=False
        )
        task_logs = tasklog_response.json()
        start_date_formated = datetime.strptime(mailing_data.get('start_date', '-'), "%Y-%m-%d").strftime("%d.%m.%Y")
        end_date_formated = datetime.strptime(mailing_data.get('end_date', '-'), "%Y-%m-%d").strftime("%d.%m.%Y")

        message_text = f"‚úâÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–ø—Ä–æ—Å–Ω–∏–∫–µ:*\n\n"
        message_text += f"üìÖ **–ü–µ—Ä–∏–æ–¥**: {mailing_data.get('period_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message_text += f"üóì **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞**: {start_date_formated}\n"
        message_text += f"üóì **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è**: {end_date_formated}\n"
        message_text += f"üìà **–°—Ç–∞—Ç—É—Å**: {mailing_data.get('status_display', '-')}\n"

        intermediate_dates = mailing_data.get('intermediate_dates', [])
        if intermediate_dates:
            message_text += "\nüìç **–î–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–æ–∫**:\n"
            if task_logs and tasklog_response.status_code == 200:
                status_mapping = {
                        'CREATE': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
                        'SUCCESS': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                        'FAILURE': '–û—à–∏–±–∫–∞',
                        'SKIPPED': '–ü—Ä–æ–ø—É—â–µ–Ω–æ',
                        'RETRY': '–ü–æ–≤—Ç–æ—Ä'
                    }
                for date in intermediate_dates:
                    matching_task = next(
                        (task for task in task_logs if task['scheduled_date'] == date and task['task_name'] == 'send_emails'),
                        None
                    )
                    status = matching_task['status'] if matching_task else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    status_display = status_mapping.get(status, status)
                    status_emoji = {
                        'CREATE': '‚è≥',
                        'SUCCESS': '‚úÖ',
                        'FAILURE': '‚ùå',
                        'SKIPPED': '‚è≠Ô∏è',
                        'RETRY': 'üîÑ'
                    }.get(status, '‚ö™')
                    date_formated = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
                    message_text += f"- {date_formated} {status_emoji} {status_display}\n"
            else:
                for date in intermediate_dates:
                    date_formated = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
                    message_text += f"- {date_formated}\n"
        else:
            message_text += "\nüìç **–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞—Ç—ã**: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

        if not stats_mailing:
            if feedback_stats and stats_response.status_code == 200:
                message_text += "\nüìã **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤**:\n"
                message_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {feedback_stats.get('total_sent', 0)}\n"
                message_text += f"‚è≥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {feedback_stats.get('total_unsent', 0)}\n"
            elif stats_response.status_code == 404:
                message_text += f"\n‚ö†Ô∏è **{feedback_stats.get('detail', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}** \n"
        else:
            message_text += "\nüìã **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤**:\n"
            message_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats_mailing.get('total_sent', 0)}\n"
            message_text += f"‚è≥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats_mailing.get('total_unsent', 0)}\n"

        await loading_msg.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=create_mailing_action_keyboard(mailing_data['id'], mailing_data['status'])
        )
    except requests.exceptions.RequestException as e:
        await loading_msg.edit_text(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")


@information_router.callback_query(F.data.startswith("cancel_mailing_"))
async def cancel_mailing(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await callback.message.delete()
    try:
        mailing_id = callback.data.split("_")[-1]
        response = requests.get(
            f"{API_URL}/mailing/{mailing_id}/",
            headers=HEADER,
            verify=False
        )
        response.raise_for_status()
        mailing_data = response.json()

        if mailing_data['status'] == 'completed':
            await callback.message.answer("üö´ –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")
            return

        response = requests.delete(
            f"{API_URL}/mailing/{mailing_id}/",
            headers=HEADER,
            verify=False
        )
        response.raise_for_status()
        await callback.message.answer(
            "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n"
            f"üìå –ü–µ—Ä–∏–æ–¥: `{mailing_data['period_name']}`\n",
            parse_mode="Markdown"
        )
    except requests.exceptions.RequestException as e:
        await callback.message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
    await callback.answer()
