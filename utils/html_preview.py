import pandas as pd


def generate_engineers_preview(df: pd.DataFrame, page: int = 0, max_rows: int = 10) -> tuple[str, int, int]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–ø—Ä–µ–≤—å—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏–∑ DataFrame —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–∫–æ–¥, —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    start = page * max_rows
    end = start + max_rows
    total_pages = (len(df) + max_rows - 1) // max_rows

    html = '<b>üìã –ü—Ä–µ–≤—å—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤</b>\n'
    html += '<i>–õ–∏—Å—Ç–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏</i>\n'
    html += '<pre>‚îå' + '‚îÄ' * 48 + '‚îê\n'

    html += f"‚îÇ {'üìß –ü–æ—á—Ç–∞':<23} ‚îÇ {'üë§ –§–ò':<20} ‚îÇ\n"
    html += '‚îú' + '‚îÄ' * 48 + '‚î§\n'

    for index, row in df[start:end].iterrows():
        username = row.get('–ü–æ—á—Ç–∞', '‚Äî')[:25]
        first_name = row.get('–§–ò', '‚Äî')[:25]
        html += f"‚îÇ {username:<23} ‚îÇ {first_name:<20} ‚îÇ\n"

    html += '‚îî' + '‚îÄ' * 48 + '‚îò\n'
    html += f'<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}</i></pre>'

    return html, page, total_pages


def generate_cases_preview(df: pd.DataFrame, page: int = 0, max_rows: int = 10) -> tuple[str, int, int]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–ø—Ä–µ–≤—å—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ –∏–∑ DataFrame —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–∫–æ–¥, —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    case_counts = df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'].value_counts().reset_index()
    case_counts.columns = ['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ö–æ–ª-–≤–æ –∫–µ–π—Å–æ–≤']

    start = page * max_rows
    end = start + max_rows
    total_pages = (len(case_counts) + max_rows - 1) // max_rows

    html = '<b>üìã –ü—Ä–µ–≤—å—é –∫–µ–π—Å–æ–≤</b>\n'
    html += '<i>–õ–∏—Å—Ç–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏</i>\n'
    html += '<pre>‚îå' + '‚îÄ' * 48 + '‚îê\n'

    html += f"‚îÇ {'üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':<23} ‚îÇ {'üìä –ö–æ–ª-–≤–æ –∫–µ–π—Å–æ–≤':<20} ‚îÇ\n"
    html += '‚îú' + '‚îÄ' * 48 + '‚î§\n'

    for index, row in case_counts[start:end].iterrows():
        executor = str(row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'])[:25]
        count = row['–ö–æ–ª-–≤–æ –∫–µ–π—Å–æ–≤']
        html += f"‚îÇ {executor:<23} ‚îÇ {count:<20} ‚îÇ\n"

    html += '‚îî' + '‚îÄ' * 48 + '‚îò\n'
    html += f'<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}</i></pre>'

    return html, page, total_pages


def generate_managers_preview(df: pd.DataFrame, page: int = 0, max_rows: int = 10) -> tuple[str, int, int]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–ø—Ä–µ–≤—å—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–∑ DataFrame —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–∫–æ–¥, —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    start = page * max_rows
    end = start + max_rows
    total_pages = (len(df) + max_rows - 1) // max_rows

    html = '<b>üìã –ü—Ä–µ–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</b>\n'
    html += '<i>–õ–∏—Å—Ç–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏</i>\n'
    html += '<pre>‚îå' + '‚îÄ' * 48 + '‚îê\n'

    html += f"‚îÇ {'üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏':<23} ‚îÇ {'üë§ –°–µ—Ä–≤–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä':<20} ‚îÇ\n"
    html += '‚îú' + '‚îÄ' * 48 + '‚î§\n'

    for index, row in df[start:end].iterrows():
        activity_name = str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '‚Äî'))[:20]  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
        if len(str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', ''))) > 20:
            activity_name += '...'  # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ –æ–±—Ä–µ–∑–∞–Ω–æ
        manager = str(row.get('–°–µ—Ä–≤–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä', '‚Äî'))[:20]
        html += f"‚îÇ {activity_name:<23} ‚îÇ {manager:<20} ‚îÇ\n"

    html += '‚îî' + '‚îÄ' * 48 + '‚îò\n'
    html += f'<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}</i></pre>'

    return html, page, total_pages